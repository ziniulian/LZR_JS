// JS_LZR - Javascript LZR库 逆向工程模版（精简无类关系版）
// 版本：V1.0
// 日期：2015-11-30

// 注：忽略了链接属性

// Processing instructions
caseInsensitive();

delimiters(<DELIMITER>);

lex(<TOKENS>);

parse(<language>);

// Lexer rules 分析器规则 ------------------------------------
<TOKENS>								::= <WHITESPACE> |
											token(<TYPECOMMENT>) |
											token(<BASECOMMENT>) |
											token(<INTFCOMMENT>) |
											<COMMENT> |
											token(<NUMBER>) |
											token("\"") token(<STRING_BODY>) token("\"") |
											token(keywords()) |
											token("m_") |
											token(<IDENTIFIER>);

// 空格
<WHITESPACE>							::= " " | "\r" | "\n" | "\t";

// 注释
<COMMENT>								::= <LINECOMMENT> | 
											<BLOCKCOMMENT>;

// 单行注释
<LINECOMMENT>							::= "//" skip("\n") "\n" |
											"//" skipEof();

// 块注释
<BLOCKCOMMENT>							::= "/*" skip("*/") "*/";

// 数字
<NUMBER>								::= <FLOAT_NUMBER> |
											<INT_NUMBER>;

// 浮点
<FLOAT_NUMBER>							::= "0".."9"+ "." ["0".."9"+] [("e" | "E") ["+" | "-"] "0".."9"+] |
											"." "0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] |
											"0".."9"+ ("e" | "E") ["+" | "-"] "0".."9"+ |
											"0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+];

// 整形
<INT_NUMBER>							::= <HEX_NUMBER> |
											<DEC_NUMBER>;


// 十六进制数
<HEX_NUMBER>							::= "0x" ("0".."9" | "a".."f")+;

// 十进制数
<DEC_NUMBER>							::= "0".."9"+;

// 字符串
<STRING_BODY>							::= skip("\"", "\\\"" | "\\\\");

// 标识符
<IDENTIFIER>							::= ("a".."z" | "_") ("a".."z" | "0".."9" | "_")*;

// 分隔符
<DELIMITER>								::= " " | "\n" | "\r" | "\t" |
											"~" | "`"  | "!"  | "@"  |
											"#" | "$"  | "%"  | "^"  |
											"&" | "*"  | "("  | ")"  | 
											"-" | "+"  | "="  | "{"  | 
											"[" | "}"  | "]"  | ";"  | 
											":" | "\\" | "\"" | "\'" | 
											"," | "<"  | ">"  | "/"  | 
											"?" | "|"  | ".";

// 布尔值
<BOOLEAN>								::= "true" | "false";

// 类型注释
<TYPECOMMENT>							::= "/*as:";

// 基类注释
<BASECOMMENT>							::= "/*bases:";

// 接口注释
<INTFCOMMENT>							::= "/*interfaces:";

// 语法规则 -------------------------------
<language>								::= <fileScope>*;

<fileScope>								::= <packageDeclaration> |
											<classDeclaration> |
											<funStatement>;

// 单一名称
<simpleName>							::= <IDENTIFIER>;

// 命名空间
<nameSpace>								::= (<IDENTIFIER> ".")*;

// 全名称
<qualifiedName>							::= <IDENTIFIER> ("." <IDENTIFIER>)*;

// 单一语句
<lineStatement>							::= skip(";") ";";

// 块语句
<blockStatement>						::= "{" [skipBalanced("{", "}")] "}";

// 控制语句
<ctrlStatement>							::= <IDENTIFIER> ["(" [skipBalanced("(", ")")] ")"] <blockStatement>;

// 函数调用语句
<funStatement>							::= ["this."] <qualifiedName> "(" [skipBalanced("(", ")")] ")" ";";

// 变量声明
<valStatement>							::= "var" <qualifiedName> "=" <lineStatement>;

// 包声明 ------------------------------
<packageDeclaration>					::= node("PACKAGE", <packageName> "." <packageBody>+);

<packageName>							::= attribute("NAME", <simpleName>);

<packageBody>							::= <packageDeclaration> |
											<classDeclaration>;

// 类声明 ------------------------------
<classDeclaration>						::= node("CLASS", node("DECLARATION", <nameSpace> node("NAME", <className>) "=" "function" <operationParameters> <classInherits>*) node("BODY", <classBody>) );

<className>								::= attribute("NAME", <simpleName>);

<classBody>								::= "{" <attributePart>* "}" ";" <operationPart>*;

// 类继承
<classInherits>							::= (<BASECOMMENT> | <INTFCOMMENT>) <parents>* "*/";

<parents>								::= node("PARENT", <parentName>+) |
											",";

<parentName>							::= attribute("NAMEPART", <simpleName>) |
											".";


// 属性声明 ------------------------
<attributePart>							::= <attributeLinkNone> |
											<attributeDeclaration> |
											<ctrlStatement> |
											<funStatement> |
											<valStatement> |
											<blockStatement>;

<attributeName>							::= attribute("NAME", <simpleName>);

// 普通属性
<attributeDeclaration>					::= node("FIELD", "this." <attributeName> <attributeBody> attributeEx("SCOPE", "private"));

// 私有静态属性
<attributeDeclarationPrvStc>			::= node("FIELD", <nameSpace> "prototype" "." <attributeName> <attributeBody> attributeEx("SCOPE", "private") attributeEx("STATIC", "true"));

// 公有静态属性
<attributeDeclarationPubStc>			::= node("FIELD", <nameSpace> <attributeName> <attributeBody> attributeEx("SCOPE", "public") attributeEx("STATIC", "true"));

// 版本信息
<versionAttribute>						::= <nameSpace> "prototype" "." "version_" <lineStatement>;

// 类名信息
<classNameAttribute>					::= <nameSpace> "prototype" "." "className_" <lineStatement>;

// 父类信息
<superAttribute>						::= <nameSpace> "prototype" "." "super_" <lineStatement>;

// 继承信息
<parentAttribute>						::= <nameSpace> "prototype" "=" <lineStatement>;

// JS_LZR属性值：	___, fun, Object, Array, Date, int, double, boolean, string
<attributeBody>							::= <attr_object> |
											<attr_hasType> |
											<attr_void> |
											<attr_null> |
											<attr_obj> |
											<attr_string> |
											<attr_int> |
											<attr_boolean> |
											<attr_double> |
											<attr_array> |
											<attr_fun> |
											<attr_val>;

<attr_object>							::= "=" "new" node("TYPE", <typeName>+) "(" [attribute("DEFAULT", skipBalanced("(", ")"))] ")" ";" [<TYPECOMMENT> [<qualifiedName>] "*/"];

<typeName>								::= attribute("NAMEPART", <simpleName>) |
											".";

<attr_hasType>							::= "=" attribute("DEFAULT", skip(";")) ";" <typCmt>;

<typCmt>								::= <TYPECOMMENT> [node("TYPE", <typeName>+)] "*/";

<attr_void>								::= ";" attributeEx("DEFAULT", "null") attributeEx("TYPE", "Object");

<attr_null>								::= "=" attribute("DEFAULT", "null") attributeEx("TYPE", "Object") ";";

<attr_obj>								::= "=" attribute("DEFAULT", <blockStatement>) attributeEx("TYPE", "Object") ";";

<attr_string>							::= "=" attribute("DEFAULT", "\"" <STRING_BODY> "\"") attributeEx("TYPE", "string") ";";

<attr_int>								::= "=" attribute("DEFAULT", <INT_NUMBER>) attributeEx("TYPE", "int") ";";

<attr_boolean>							::= "=" attribute("DEFAULT", <BOOLEAN>) attributeEx("TYPE", "boolean") ";";

<attr_double>							::= "=" attribute("DEFAULT", <FLOAT_NUMBER>) attributeEx("TYPE", "double") ";";

<attr_array>							::= "=" attribute("DEFAULT", "[" [skipBalanced("[", "]")] "]") attributeEx("TYPE", "Array") ";";

<attr_fun>								::= "=" attribute("DEFAULT", "function" "(" [skipBalanced("(", ")")] ")" <blockStatement>) attributeEx("TYPE", "fun") ";";

<attr_val>								::= "=" attribute("DEFAULT", skip(";")) attributeEx("TYPE", "Object") ";";

// 链接属性
<attributeLinkDeclaration>				::= node("ATTRIBUTE", "this." <attributeLinkName> <attributeLinkBody> attributeEx("SCOPE", "private"));

<attributeLinkName>						::= attribute("NAME", "m_" <simpleName>);

<attributeLinkBody>						::= <attr_object> attributeEx("LOWBOUND", "0") attributeEx("HIGHBOUND", "1") |
											"=" attribute("DEFAULT", "[" skip(";")) ";" <typCmt> attributeEx("HIGHBOUND", "*") |
											"=" attribute("DEFAULT", "{" skip(";")) ";" <typCmt> attributeEx("HIGHBOUND", "*") attributeEx("LOWBOUND", "0");
											// <attr_hasType> attributeEx("LOWBOUND", "0") attributeEx("HIGHBOUND", "*");

// 忽略链接属性
<attributeLinkNone>						::= "this." "m_" skip(";") ";" [<TYPECOMMENT> [<qualifiedName>] "*/"];

// 方法声明 ------------------------
<operationPart>							::= <operationDeclaration> |
											<operationDeclarationStatic> |
											<versionAttribute> |
											<classNameAttribute> |
											<superAttribute> |
											<parentAttribute> |
											<attributeDeclarationPrvStc> |
											<attributeDeclarationPubStc> |
											<funStatement>;

// 普通方法
<operationDeclaration>					::= node("METHOD", node("DECLARATION", <nameSpace> "prototype" "." <operationName> "=" "function" <operationParameters> [<typCmt>]) "{" [<operationBody>] "}" ";");

// 静态方法
<operationDeclarationStatic>			::= node("METHOD", node("DECLARATION", <nameSpace> <operationName> "=" "function" <operationParameters> [<typCmt>] attributeEx("STATIC", "true")) "{" [<operationBody>] "}" ";");

<operationName>							::= attribute("NAME", <simpleName>);

<operationParameters>					::= "(" [<parameterList>] ")";

<parameterList>							::= <parameter> ("," <parameter>)*;

<parameter>								::= node("PARAMETER", <parameterName> [<typCmt>]);

<parameterName>							::= attribute("NAME", <simpleName>);

<operationBody>							::= node("TAG", attribute("VALUE", skipBalanced("{", "}")) attributeEx("NAME", "LZR_code") attributeEx("MEMO", "T"));
