<MDG.Technology version="1.0"><Documentation id="JS_LZR" name="JS_LZR" version="1.0" notes="JS_LZR"/><CodeModules><CodeModule language="JS_LZR" notes=""><CodeTemplates><RefData version="1.0" exporter="EA.25">
					<DataSet name="JS_LZR_Code_Template" table="t_template" filter="TemplateType='#TemplateType#' and TemplateName='#TemplateName#' and Style='#Style#'"><DataRow><Column name="TemplateID" value="{EFC240D9-2977-43c7-8879-3B7C4D57B467}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Parameter"/><Column name="Template" value="%paramName%%paramQualType ? &quot;/*as:&quot; value &quot;*/&quot;%"/></DataRow><DataRow><Column name="TemplateID" value="{F6B2314C-5854-4462-A448-341EB98B0E4C}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Linked Attribute"/><Column name="Template" value="%LinkedAttributeNotes%&#xA;%LinkedAttributeDeclaration%"/></DataRow><DataRow><Column name="TemplateID" value="{F2293331-7DD2-4f08-8B25-16B852FAD2A1}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Linked Attribute Notes"/><Column name="Template" value="%linkAttNotes ? &quot;// &quot; value%"/></DataRow><DataRow><Column name="TemplateID" value="{B9F8906A-D5C0-4d8d-BF88-6AF23BFCB57C}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Linked Attribute Declaration"/><Column name="Template" value="%if linkAttAggregation != &quot;none&quot;%&#xA;%if linkAttRole == &quot;&quot;%&#xA;$name = &quot;this.m_&quot; + %linkAttName%&#xA;%else%&#xA;$name = &quot;this.m_&quot; + %linkAttRole%&#xA;%endIf%&#xA;$type = %linkAttQualName%&#xA;%if linkCard == &quot;0..1&quot; or linkCard == &quot;1*&quot; or linkCard == &quot;1&quot; or linkCard == &quot;&quot;%&#xA;$name = new $type();	/*as:$type*/&#xA;%elseIf linkCard == &quot;0&quot;%&#xA;%elseIf linkCard == &quot;0..*&quot;%&#xA;$name = {};	/*as:$type*/&#xA;%else%&#xA;$name = [];	/*as:$type*/&#xA;%endIf%&#xA;%endIf%"/></DataRow><DataRow><Column name="TemplateID" value="{78944A1A-2046-48dd-90F8-30306C90DF68}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Class Base"/></DataRow><DataRow><Column name="TemplateID" value="{A060A7AB-8F13-440d-89A5-38A5476D6184}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Class Interface"/></DataRow><DataRow><Column name="TemplateID" value="{AABFD934-5C33-4176-B1C7-7BCBAF834B56}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Linked Class Base"/><Column name="Template" value="%linkParentQualName%"/></DataRow><DataRow><Column name="TemplateID" value="{DB828FF3-7CD2-492c-A9FC-AFEDC238C5E7}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Linked Class Interface"/><Column name="Template" value="%LinkedClassBase%"/></DataRow><DataRow><Column name="TemplateID" value="{8A5EA92F-7AC7-4bc5-9D44-E0FB82C2C716}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Class Inherits"/><Column name="Template" value="%PI=&quot; &quot;%&#xA;$bases = %list=&quot;ClassBase&quot; @separator=&quot;,&quot;%&#xA;$interfaces = %list=&quot;ClassInterface&quot; @separator=&quot;,&quot;%&#xA;&#xA;%if $bases != &quot;&quot;%&#xA;/*bases:$bases*/&#xA;%endIf%&#xA;&#xA;%if $interfaces != &quot;&quot;%&#xA;/*interfaces:$interfaces*/&#xA;%endIf%"/></DataRow><DataRow><Column name="TemplateID" value="{3B6476CA-9689-49ea-84C5-57FEA1476283}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="File"/><Column name="Template" value="/*************************************************&#xA;作者：%classAuthor%&#xA;类名：%className%&#xA;说明：%classAlias%&#xA;创建日期：%eaDateTime%&#xA;版本号：%classVersion%&#xA;*************************************************/\n&#xA;&#xA;%list=&quot;Namespace&quot; @separator=&quot;\n\n&quot; @indent=&quot;&quot;%"/></DataRow><DataRow><Column name="TemplateID" value="{6619EA84-1C01-47eb-8872-C1C6A08C2E57}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Namespace"/><Column name="Template" value="%NamespaceDeclaration%&#xA;%NamespaceBody%"/></DataRow><DataRow><Column name="TemplateID" value="{16D2D394-B783-4ec2-B927-241A848EC7FB}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Namespace Declaration"/></DataRow><DataRow><Column name="TemplateID" value="{5EB71F3F-2C54-41bc-B3E4-66E19896E33D}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Namespace Body"/><Column name="Template" value="%if packageHasGenClasses != &quot;T&quot;%&#xA;%list=&quot;Namespace&quot; @separator=&quot;\n\n&quot; @indent=&quot;&quot;%&#xA;%endTemplate%&#xA;&#xA;$imps = %ImportSection%&#xA;%if $imps != &quot;&quot;%&#xA;LZR.load([&#xA;	$imps&#xA;], %qt%%packagePath ? value &quot;.&quot;%%className%%qt%);&#xA;%endIf%&#xA;&#xA;%packagePath ? value &quot;.&quot;%%Class%"/></DataRow><DataRow><Column name="TemplateID" value="{DA71B8CC-7EAA-4e22-BB1F-02ACABC38AEB}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Import"/><Column name="Template" value="%qt%%importPackagePath%.%importClassName%%qt%"/></DataRow><DataRow><Column name="TemplateID" value="{1308688E-A7E3-478e-8C38-10E080A417A8}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Import Section"/><Column name="Template" value="%if packagePath != &quot;&quot;%&#xA;$separator = &quot;,\n\t&quot;&#xA;$imports = %list=&quot;Import&quot; @separator=&quot;,\n\t&quot; @indent=&quot;&quot; importFromAggregation==&quot;T&quot; or importFromAssociation==&quot;T&quot; or importFromAtt==&quot;T&quot; or importFromDependency==&quot;T&quot; or importFromGeneralization==&quot;T&quot; or importFromMeth==&quot;T&quot; or importFromParam==&quot;T&quot; or importFromRealization==&quot;T&quot;%&#xA;%if $imports != &quot;&quot;%&#xA;$imports = $separator + $imports&#xA;%endIf%&#xA;$imports = %qt% + %packagePath% + %qt% + $imports&#xA;%REMOVE_DUPLICATES($imports, $separator)%&#xA;%endIf%"/></DataRow><DataRow><Column name="TemplateID" value="{A1F2B788-9CB8-444e-B2B7-0F815DAC18CE}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Class Declaration"/><Column name="Template" value="%PI=&quot; &quot;%&#xA;%className% = function (obj)&#xA;%ClassInherits%"/></DataRow><DataRow><Column name="TemplateID" value="{1BB869E3-86A2-4aa8-AAEB-F450C1D3B96A}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Class"/><Column name="Template" value="%PI=&quot; &quot;%&#xA;%ClassDeclaration%&#xA;%ClassBody%"/></DataRow><DataRow><Column name="TemplateID" value="{01618625-6C56-4d23-90A5-8CADFF5C5D7E}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Class Body"/><Column name="Template" value="$className = %packagePath ? value &quot;.&quot;% + %className%&#xA;$bases = %list=&quot;ClassBase&quot; @separator=&quot;,&quot;%&#xA;$interfaces = %list=&quot;ClassInterface&quot; @separator=&quot;,&quot;%&#xA;$att = %list=&quot;Attribute&quot; @separator=&quot;\n\n&quot; @indent=&quot;\t&quot; attStatic != &quot;T&quot;%&#xA;{&#xA;%if $bases != &quot;&quot;%&#xA;	LZR.initSuper(this);\n&#xA;%endIf%&#xA;%if $interfaces != &quot;&quot;%&#xA;	%REPLACE($interfaces, &quot;,&quot;, &quot;.call(this);\n\t&quot;)%.call(this);\n&#xA;%endIf%&#xA;&#xA;%if $att != &quot;&quot;%&#xA;$att%elemType != &quot;Interface&quot; ? &quot;\n&quot;%&#xA;%endIf%&#xA;&#xA;%if elemType != &quot;Interface&quot;%&#xA;	if (obj &amp;&amp; obj.super_) {&#xA;		obj.super_.prototype.init_.call(this);&#xA;	} else {&#xA;		this.init_(obj);&#xA;	}&#xA;%endIf%&#xA;};&#xA;&#xA;$d = &quot;.prototype, &quot; + $className + &quot;.prototype);\n&quot; + $className + &quot;.prototype = LZR.clone (&quot;&#xA;%if $interfaces != &quot;&quot;%&#xA;$className.prototype = LZR.clone (%REPLACE($interfaces, &quot;,&quot;, $d)%.prototype, $className.prototype);&#xA;%endIf%&#xA;%if $bases != &quot;&quot;%&#xA;$className.prototype = LZR.clone (%REPLACE($bases, &quot;,&quot;, $d)%.prototype, $className.prototype);&#xA;$className.prototype.super_ = [$bases];&#xA;%endIf%&#xA;&#xA;$className.prototype.className_ = %qt%$className%qt%;&#xA;%PI=&quot;\n\n&quot;%&#xA;$className.prototype.version_ = %qt%%classVersion%%qt%;&#xA;%if $className != &quot;LZR&quot;%&#xA;LZR.load(null, %qt%$className%qt%);&#xA;%endIf%&#xA;&#xA;%list=&quot;Attribute&quot; @separator=&quot;\n\n&quot; @indent=&quot;&quot; attStatic == &quot;T&quot;%&#xA;%list=&quot;Operation&quot; @separator=&quot;\n\n&quot; @indent=&quot;&quot;%"/></DataRow><DataRow><Column name="TemplateID" value="{BAED1D1B-8EA4-4e7b-8821-D4CCF94E46D3}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Attribute"/><Column name="Template" value="%AttributeNotes%&#xA;%AttributeDeclaration%"/></DataRow><DataRow><Column name="TemplateID" value="{29B071F7-C8D7-4d8e-B5A4-76E6C9904A30}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Operation"/><Column name="Template" value="%OperationNotes%&#xA;%PI=&quot; &quot;%&#xA;%OperationDeclaration%&#xA;%OperationBody%"/></DataRow><DataRow><Column name="TemplateID" value="{BCA320F6-6242-4773-91E3-EBF7A28E0594}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Attribute Notes"/><Column name="Template" value="%attAlias ? &quot;// &quot; value%"/></DataRow><DataRow><Column name="TemplateID" value="{9C012B07-3D74-4f5b-AD6B-853DFE57973A}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Attribute Declaration"/><Column name="Template" value="$className = %packagePath ? value &quot;.&quot;% + %className%&#xA;&#xA;%if attType == &quot;&quot;%&#xA;$value = &quot;null&quot;&#xA;%elseIf attType == &quot;string&quot;%&#xA;%if attInitial == &quot;&quot;%&#xA;$value = %qt% +%qt%&#xA;%else%&#xA;$value = %attInitial%&#xA;%endIf%&#xA;%elseIf attType == &quot;boolean&quot;%&#xA;$value = %attInitial ? value : &quot;false&quot;%&#xA;%elseIf attType == &quot;int&quot;%&#xA;$value = %attInitial ? value : &quot;0&quot;%&#xA;%elseIf attType == &quot;double&quot;%&#xA;$value = %attInitial ? value : &quot;0&quot;%&#xA;%elseIf attType == &quot;Object&quot;%&#xA;$value = %attInitial ? value : &quot;{}&quot;%&#xA;%elseIf attType == &quot;Array&quot;%&#xA;$value = %attInitial ? value : &quot;[]&quot;%&#xA;%elseIf attType == &quot;fun&quot;%&#xA;$value = %attInitial ? value : &quot;function() {}&quot;%&#xA;%else%&#xA;$value = &quot;new &quot; + %attQualType% + &quot;(&quot; + %attInitial% + &quot;)&quot;&#xA;%endIf%&#xA;&#xA;$value += &quot;;&quot;&#xA;$value += %attQualType ? &quot;\t/*as:&quot; value &quot;*/&quot;%&#xA;&#xA;%if attStatic == &quot;T&quot;%&#xA;%if attScope == &quot;Public&quot;%&#xA;$className.%attName% = $value&#xA;%else%&#xA;$className.prototype.%attName% = $value&#xA;%endIf%&#xA;%else%&#xA;this.%attName% = $value&#xA;%endIf%"/></DataRow><DataRow><Column name="TemplateID" value="{769ADAD6-3C4D-43a2-B8DE-461C2C34F57A}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Operation Notes"/><Column name="Template" value="%opAlias ? &quot;// &quot; value%"/></DataRow><DataRow><Column name="TemplateID" value="{6F459B42-4003-42cb-8A44-38C48BBE67A3}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Operation Declaration"/><Column name="Template" value="$className = %packagePath ? value &quot;.&quot;% + %className%&#xA;%if opStatic == &quot;&quot;%&#xA;$className += &quot;.prototype&quot;&#xA;%endIf%&#xA;$className.%opName% = function (%list=&quot;Parameter&quot; @separator=&quot;, &quot;%)%opReturnQualType ? &quot;/*as:&quot; value &quot;*/&quot;%"/></DataRow><DataRow><Column name="TemplateID" value="{AA82C64B-28AB-491e-8CF3-8AC1E944834C}"/><Column name="TemplateType" value="JS_LZR_Code_Template"/><Column name="TemplateName" value="Operation Body"/><Column name="Template" value="{&#xA;	%opTag:&quot;LZR_code&quot;%&#xA;};"/></DataRow></DataSet></RefData></CodeTemplates><CodeOptions><CodeOption name="Grammar"><![CDATA[// JS_LZR - Javascript LZR搴?閫嗗悜宸ョ▼妯＄増锛堢簿绠€鏃犵被鍏崇郴鐗堬級
// 鐗堟湰锛歏1.0
// 鏃ユ湡锛?015-11-30

// Processing instructions
caseInsensitive();

delimiters(<DELIMITER>);

lex(<TOKENS>);

parse(<language>);

// Lexer rules 鍒嗘瀽鍣ㄨ鍒?------------------------------------
<TOKENS>								::= <WHITESPACE> |
											token(<TYPECOMMENT>) |
											token(<BASECOMMENT>) |
											token(<INTFCOMMENT>) |
											<COMMENT> |
											token(<NUMBER>) |
											token("\"") token(<STRING_BODY>) token("\"") |
											token(keywords()) |
											token("m_") |
											token(<IDENTIFIER>);

// 绌烘牸
<WHITESPACE>							::= " " | "\r" | "\n" | "\t";

// 娉ㄩ噴
<COMMENT>								::= <LINECOMMENT> | 
											<BLOCKCOMMENT>;

// 鍗曡娉ㄩ噴
<LINECOMMENT>							::= "//" skip("\n") "\n" |
											"//" skipEof();

// 鍧楁敞閲?
<BLOCKCOMMENT>							::= "/*" skip("*/") "*/";

// 鏁板瓧
<NUMBER>								::= <FLOAT_NUMBER> |
											<INT_NUMBER>;

// 娴偣
<FLOAT_NUMBER>							::= "0".."9"+ "." ["0".."9"+] [("e" | "E") ["+" | "-"] "0".."9"+] |
											"." "0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] |
											"0".."9"+ ("e" | "E") ["+" | "-"] "0".."9"+ |
											"0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+];

// 鏁村舰
<INT_NUMBER>							::= <HEX_NUMBER> |
											<DEC_NUMBER>;


// 鍗佸叚杩涘埗鏁?
<HEX_NUMBER>							::= "0x" ("0".."9" | "a".."f")+;

// 鍗佽繘鍒舵暟
<DEC_NUMBER>							::= "0".."9"+;

// 瀛楃涓?
<STRING_BODY>							::= skip("\"", "\\\"" | "\\\\");

// 鏍囪瘑绗?
<IDENTIFIER>							::= ("a".."z" | "_") ("a".."z" | "0".."9" | "_")*;

// 鍒嗛殧绗?
<DELIMITER>								::= " " | "\n" | "\r" | "\t" |
											"~" | "`"  | "!"  | "@"  |
											"#" | "$"  | "%"  | "^"  |
											"&" | "*"  | "("  | ")"  | 
											"-" | "+"  | "="  | "{"  | 
											"[" | "}"  | "]"  | ";"  | 
											":" | "\\" | "\"" | "\'" | 
											"," | "<"  | ">"  | "/"  | 
											"?" | "|"  | ".";

// 甯冨皵鍊?
<BOOLEAN>								::= "true" | "false";

// 绫诲瀷娉ㄩ噴
<TYPECOMMENT>							::= "/*as:";

// 鍩虹被娉ㄩ噴
<BASECOMMENT>							::= "/*bases:";

// 鎺ュ彛娉ㄩ噴
<INTFCOMMENT>							::= "/*interfaces:";

// 璇硶瑙勫垯 -------------------------------
<language>								::= <fileScope>*;

<fileScope>								::= <packageDeclaration> |
											<classDeclaration> |
											<funStatement>;

// 鍗曚竴鍚嶇О
<simpleName>							::= <IDENTIFIER>;

// 鍛藉悕绌洪棿
<nameSpace>								::= (<IDENTIFIER> ".")*;

// 鍏ㄥ悕绉?
<qualifiedName>							::= <IDENTIFIER> ("." <IDENTIFIER>)*;

// 鍗曚竴璇彞
<lineStatement>							::= skip(";") ";";

// 鍧楄鍙?
<blockStatement>						::= "{" [skipBalanced("{", "}")] "}";

// 鎺у埗璇彞
<ctrlStatement>							::= <IDENTIFIER> ["(" [skipBalanced("(", ")")] ")"] <blockStatement>;

// 鍑芥暟璋冪敤璇彞
<funStatement>							::= ["this."] <qualifiedName> "(" [skipBalanced("(", ")")] ")" ";";

// 鍙橀噺澹版槑
<valStatement>							::= "var" <qualifiedName> "=" <lineStatement>;

// 鍖呭０鏄?------------------------------
<packageDeclaration>					::= node("PACKAGE", <packageName> "." <packageBody>+);

<packageName>							::= attribute("NAME", <simpleName>);

<packageBody>							::= <packageDeclaration> |
											<classDeclaration>;

// 绫诲０鏄?------------------------------
<classDeclaration>						::= node("CLASS", node("DECLARATION", <nameSpace> node("NAME", <className>) "=" "function" <operationParameters> <classInherits>*) node("BODY", <classBody>) );

<className>								::= attribute("NAME", <simpleName>);

<classBody>								::= "{" <attributePart>* "}" ";" <operationPart>*;

// 绫荤户鎵?
<classInherits>							::= (<BASECOMMENT> | <INTFCOMMENT>) <parents>* "*/";

<parents>								::= node("PARENT", <parentName>+) |
											",";

<parentName>							::= attribute("NAMEPART", <simpleName>) |
											".";


// 灞炴€у０鏄?------------------------
<attributePart>							::= <attributeLinkNone> |
											<attributeDeclaration> |
											<ctrlStatement> |
											<funStatement> |
											<valStatement> |
											<blockStatement>;

<attributeName>							::= attribute("NAME", <simpleName>);

// 鏅€氬睘鎬?
<attributeDeclaration>					::= node("FIELD", "this." <attributeName> <attributeBody> attributeEx("SCOPE", "private"));

// 绉佹湁闈欐€佸睘鎬?
<attributeDeclarationPrvStc>			::= node("FIELD", <nameSpace> "prototype" "." <attributeName> <attributeBody> attributeEx("SCOPE", "private") attributeEx("STATIC", "true"));

// 鍏湁闈欐€佸睘鎬?
<attributeDeclarationPubStc>			::= node("FIELD", <nameSpace> <attributeName> <attributeBody> attributeEx("SCOPE", "public") attributeEx("STATIC", "true"));

// 鐗堟湰淇℃伅
<versionAttribute>						::= <nameSpace> "prototype" "." "version_" <lineStatement>;

// 绫诲悕淇℃伅
<classNameAttribute>					::= <nameSpace> "prototype" "." "className_" <lineStatement>;

// 鐖剁被淇℃伅
<superAttribute>						::= <nameSpace> "prototype" "." "super_" <lineStatement>;

// 缁ф壙淇℃伅
<parentAttribute>						::= <nameSpace> "prototype" "=" <lineStatement>;

// JS_LZR灞炴€у€硷細	___, fun, Object, Array, Date, int, double, boolean, string
<attributeBody>							::= <attr_object> |
											<attr_hasType> |
											<attr_void> |
											<attr_null> |
											<attr_obj> |
											<attr_string> |
											<attr_int> |
											<attr_boolean> |
											<attr_double> |
											<attr_array> |
											<attr_fun> |
											<attr_val>;

<attr_object>							::= "=" "new" node("TYPE", <typeName>+) "(" [attribute("DEFAULT", skipBalanced("(", ")"))] ")" ";" [<TYPECOMMENT> [<qualifiedName>] "*/"];

<typeName>								::= attribute("NAMEPART", <simpleName>) |
											".";

<attr_hasType>							::= "=" attribute("DEFAULT", skip(";")) ";" <typCmt>;

<typCmt>								::= <TYPECOMMENT> [node("TYPE", <typeName>+)] "*/";

<attr_void>								::= ";" attributeEx("DEFAULT", "null") attributeEx("TYPE", "Object");

<attr_null>								::= "=" attribute("DEFAULT", "null") attributeEx("TYPE", "Object") ";";

<attr_obj>								::= "=" attribute("DEFAULT", <blockStatement>) attributeEx("TYPE", "Object") ";";

<attr_string>							::= "=" attribute("DEFAULT", "\"" <STRING_BODY> "\"") attributeEx("TYPE", "string") ";";

<attr_int>								::= "=" attribute("DEFAULT", <INT_NUMBER>) attributeEx("TYPE", "int") ";";

<attr_boolean>							::= "=" attribute("DEFAULT", <BOOLEAN>) attributeEx("TYPE", "boolean") ";";

<attr_double>							::= "=" attribute("DEFAULT", <FLOAT_NUMBER>) attributeEx("TYPE", "double") ";";

<attr_array>							::= "=" attribute("DEFAULT", "[" [skipBalanced("[", "]")] "]") attributeEx("TYPE", "Array") ";";

<attr_fun>								::= "=" attribute("DEFAULT", "function" "(" [skipBalanced("(", ")")] ")" <blockStatement>) attributeEx("TYPE", "fun") ";";

<attr_val>								::= "=" attribute("DEFAULT", skip(";")) attributeEx("TYPE", "Object") ";";

// 閾炬帴灞炴€?
<attributeLinkDeclaration>				::= node("ATTRIBUTE", "this." <attributeLinkName> <attributeLinkBody> attributeEx("SCOPE", "private"));

<attributeLinkName>						::= attribute("NAME", "m_" <simpleName>);

<attributeLinkBody>						::= <attr_object> attributeEx("LOWBOUND", "0") attributeEx("HIGHBOUND", "1") |
											"=" attribute("DEFAULT", "[" skip(";")) ";" <typCmt> attributeEx("HIGHBOUND", "*") |
											"=" attribute("DEFAULT", "{" skip(";")) ";" <typCmt> attributeEx("HIGHBOUND", "*") attributeEx("LOWBOUND", "0");
											// <attr_hasType> attributeEx("LOWBOUND", "0") attributeEx("HIGHBOUND", "*");

// 蹇界暐閾炬帴灞炴€?
<attributeLinkNone>						::= "this." "m_" skip(";") ";" [<TYPECOMMENT> [<qualifiedName>] "*/"];

// 鏂规硶澹版槑 ------------------------
<operationPart>							::= <operationDeclaration> |
											<operationDeclarationStatic> |
											<versionAttribute> |
											<classNameAttribute> |
											<superAttribute> |
											<parentAttribute> |
											<attributeDeclarationPrvStc> |
											<attributeDeclarationPubStc> |
											<funStatement>;

// 鏅€氭柟娉?
<operationDeclaration>					::= node("METHOD", node("DECLARATION", <nameSpace> "prototype" "." <operationName> "=" "function" <operationParameters> [<typCmt>]) "{" [<operationBody>] "}" ";");

// 闈欐€佹柟娉?
<operationDeclarationStatic>			::= node("METHOD", node("DECLARATION", <nameSpace> <operationName> "=" "function" <operationParameters> [<typCmt>] attributeEx("STATIC", "true")) "{" [<operationBody>] "}" ";");

<operationName>							::= attribute("NAME", <simpleName>);

<operationParameters>					::= "(" [<parameterList>] ")";

<parameterList>							::= <parameter> ("," <parameter>)*;

<parameter>								::= node("PARAMETER", <parameterName> [<typCmt>]);

<parameterName>							::= attribute("NAME", <simpleName>);

<operationBody>							::= node("TAG", attribute("VALUE", skipBalanced("{", "}")) attributeEx("NAME", "LZR_code") attributeEx("MEMO", "T"));
]]></CodeOption></CodeOptions></CodeModule></CodeModules></MDG.Technology>
